

****************************************************************************
IFOPT/EIGEN USAGE NOTES
****************************************************************************

The types `matrix_t` and `vector_t` are aliases for Eigen types that I created to decrease verbosity.
See `include/includes_and_types.hh`.

Don't declare variables that hold eigen objects using `auto`.
For more details: https://stackoverflow.com/questions/29231798/eigen-how-to-make-a-deep-copy-of-a-matrix

Fixed-size eigen objects and objects (structs,classes) that contain fixed-size Eigen objects must 
be passed by reference to ensure correct memory alignment. They may be returned by value though.

When we are assigning a matrix expression to a matrix that appears
in the expression, be sure to call .eval() on the RHS.
Ex. A = A * B; should be A = (A * B).eval();

To do a deep copy of an Eigen object into a new variable, just
declare a new variable with an explicit typematrix_t A = B; performs a deep copy of B into A.

Eigen matrix and vector types only support linear-agebra operations.
In order to perform component wise/ pytorch tensor operations, call the
.array() method first.
Ex. Get component-wise inverse
    Bad:    my_matrix.inverse()  // returns inverse of matrix A^(-1)
    Good:   my_matrix.array().inverse() // returns matrix where a_ij is now 1/a_ij
    